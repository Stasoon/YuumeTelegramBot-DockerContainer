 // –ø–æ–¥–∫–ª—é—á–∞–µ–º Dotenv.
require('dotenv').config();
const TelegramAPI = require('node-telegram-bot-api') // —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Telegram
const keyboard =  require ('./module/keyboard')
const messageText =  require ('./module/text.js')


console.log('------ –°–ö–†–ò–ü–¢ –ó–ê–ü–£–©–ï–ù ------')

const mongoose = require('mongoose') // –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MongoDB
const User = require('./models/users') // —ç–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


// –¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Å—Ç–∏—Ç—Å—è –±–æ—Ç
const SERVER_URL = `${process.env.SERVER_URL}`
const BOT_TOKEN = `${process.env.BOT_TOKEN}`
const DB_TOKEN = `${process.env.DB_TOKEN}`
const PORT = process.env.PORT || 3000


// –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –ø—Ä–∏–≤—è–∑–∫–∞ –≤–µ–±—Ö—É–∫–∞
const bot = new TelegramAPI(BOT_TOKEN, { polling: true }) //, webHook: {port: PORT}
// bot.setWebHook()
// bot.setWebHook(`${SERVER_URL}/webhook/${BOT_TOKEN}`)


// –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
let iComm = 0;

// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
let NameButton = '–ö–Ω–æ–ø–∫–∞'
let LinkButton = 'https://t.me/Dakos777'

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å.
mongoose
    .connect(DB_TOKEN, {useNewUrlParser: true, useUnifiedTopology: true}) 
    .then((res) => console.log('Success! DB connected'))  // —É—Å–ø–µ—Ö.
    .catch( err => console.log(err)); // –æ—à–∏–±–∫–∞.


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
// –∞ —Ç–∞–∫–∂–µ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
bot.onText(/\/start/, msg => {
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–π–¥–∏—à–Ω–∏–∫–∞ —á–∞—Ç–∞.
    const ChatId = msg.chat.id;
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    const UserName = msg.from.first_name;


    // —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    const users = new User({ChatId, UserName});
    users
        .save()
        .then(res => console.log(`User ${UserName} added`))
        .catch(err => console.log(`Error! Can not create user ${UserName}!!\n`+err))

    bot.sendPhoto(ChatId, './src/start.jpg', {
        caption: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <u>${UserName}</u>!
\n‚öôÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <strong>–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Ö–æ–¥—É –≤ VIP-–∫–∞–Ω–∞–ª</strong>, —Ç–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å <strong>–æ—Ç–∑—ã–≤—ã –ª—é–¥–µ–π –∏ —Ä–∞–±–æ—Ç—É —Å–∞–º–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.</strong>
\n‚òëÔ∏è <strong>–ü—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ VIP –∫–∞–Ω–∞–ª</strong>.
\nüîä –¢–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="https://t.me/+qkRUSkRNSt82NzBi">–Ω–∞—à –∫–∞–Ω–∞–ª</a>, –≥–¥–µ –µ—Å—Ç—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ 
\n<strong>–ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã!</strong>`, 
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: keyboard.start
        }
    }) 
})


// –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// –∏—Å—Ö–æ–¥—è –∑–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º data, –±—É–¥–µ–º –≤—ã–±–∏—Ä–∞—Ç—å —á—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å

bot.on('callback_query', query => {
    bot.answerCallbackQuery(query.id);

    const ChatId = query.message.chat.id;
    const messageId = query.message.message_id;
    
    switch(query.data){
        case 'second': 
            bot.sendVideo(ChatId, './src/second.MP4', {
                caption: messageText.second,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard.second
                }
            })
            break
        

        case 'join':
            bot.sendPhoto(ChatId, './src/join.jpg', {
                caption: messageText.join,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard.join
                }
            })
            break


        case 'account_created':        
            bot.sendPhoto(ChatId, './src/created.jpg', {
                caption: messageText.account_created,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard.acc_created
                }
            })
            break

        case 'have_account':
            bot.sendPhoto(ChatId, './src/haveacc.jpg', {
                caption: messageText.have_account, 
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard.have_acc
                }
            })
            break


        case 'comment':
            bot.sendPhoto(ChatId, `./src/comm${iComm}.PNG`, {
                caption: messageText.comment,
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: keyboard.comment
                }
            })

            // –µ—Å–ª–∏ –ø–µ—Ä–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç —á–∏—Å–ª–æ 12, —Ç–æ –º—ã –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –Ω–æ–ª—å, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É.
            iComm != 11 ? iComm++ : iComm = 0;
            break
    }
})

// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

bot.onText(/\/ADMINpostphoto/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendPhoto(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: '1',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })
                
    }

})


// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

bot.onText(/\/ADMINpostvideo/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendVideo(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: '1',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })
                
    }

})


// –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
// –∑–∞—Ç–µ–º —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

bot.onText(/\/ADMINposttext/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(1).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendMessage(log[i].ChatId, sendText, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: NameButton,
                            callback_data: '1',  
                            url: LinkButton
                        }
                    ],
                ],
            }
        })
                
    }

})

bot.onText(/\/ADMINnamebutton/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }

    NameButton = msg.text.split(" ").slice(1,2).join(" ");
    
    const ChatId = msg.chat.id;

    bot.sendMessage(ChatId, `name button: ${NameButton}`, {
        parse_mode: 'HTML',
    })
    
})

bot.onText(/\/ADMINlinkbutton/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }
    LinkButton = msg.text.split(" ").slice(1,2).join(" ");

    const ChatId = msg.chat.id;

    bot.sendMessage(ChatId, `link button: ${LinkButton}`, {
        parse_mode: 'HTML',
    })
})


bot.onText(/\/ADMINnbtnposttext/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(1).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {
        
        bot.sendMessage(log[i].ChatId, sendText, {
            parse_mode: 'HTML',
            
        })         
    }
})

bot.onText(/\/ADMINnbtnpostphoto/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.
    const sendText = msg.text.split(" ").slice(2).join(" "); 

    //–ø–µ—Ä–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    const sendUrl = msg.text.split(" ").slice(1,2).join(" ");

    const log = await User.find( { }, { ChatId: 1, _id: 0 } );
    
    // –ø—Ä–æ—Ö–æ–¥–∏–º —Ü–∏–∫–ª–æ–º –ø–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º
    for (let i = 0; i < log.length; i++) {      
        bot.sendPhoto(log[i].ChatId, sendUrl, {
            caption: sendText,
            parse_mode: 'HTML',
        })        
    }
})


bot.onText(/\/ADMINusers/, async msg => {
    if (msg.from.username !== "yumme1" && msg.from.username !== "stascsa"){
        return
    }
    
    console.log('–¥–∞')

    const ChatId = msg.chat.id;
    const log = await User.find( { }, { ChatId: 1, _id: 0 } );

    bot.sendMessage(ChatId, `–ë–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å ${log.length} —á–µ–ª–æ–≤–µ–∫.`, {
        parse_mode: 'HTML'
    })
})


const express = require("express");
// const axios = require('axios');
const app = express()

app.get('/', (req, res) => {
  res.status(200).send('OK');
});

app.get('/health', (req, res) => {
  res.status(200).send('OK');
  console.log('Bot is ok!')
});

app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
});

